/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MembershipPlan } from "./MembershipPlan";
import { MembershipPlanCountArgs } from "./MembershipPlanCountArgs";
import { MembershipPlanFindManyArgs } from "./MembershipPlanFindManyArgs";
import { MembershipPlanFindUniqueArgs } from "./MembershipPlanFindUniqueArgs";
import { CreateMembershipPlanArgs } from "./CreateMembershipPlanArgs";
import { UpdateMembershipPlanArgs } from "./UpdateMembershipPlanArgs";
import { DeleteMembershipPlanArgs } from "./DeleteMembershipPlanArgs";
import { MembershipPlanService } from "../membershipPlan.service";
@graphql.Resolver(() => MembershipPlan)
export class MembershipPlanResolverBase {
  constructor(protected readonly service: MembershipPlanService) {}

  async _membershipPlansMeta(
    @graphql.Args() args: MembershipPlanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MembershipPlan])
  async membershipPlans(
    @graphql.Args() args: MembershipPlanFindManyArgs
  ): Promise<MembershipPlan[]> {
    return this.service.membershipPlans(args);
  }

  @graphql.Query(() => MembershipPlan, { nullable: true })
  async membershipPlan(
    @graphql.Args() args: MembershipPlanFindUniqueArgs
  ): Promise<MembershipPlan | null> {
    const result = await this.service.membershipPlan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MembershipPlan)
  async createMembershipPlan(
    @graphql.Args() args: CreateMembershipPlanArgs
  ): Promise<MembershipPlan> {
    return await this.service.createMembershipPlan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MembershipPlan)
  async updateMembershipPlan(
    @graphql.Args() args: UpdateMembershipPlanArgs
  ): Promise<MembershipPlan | null> {
    try {
      return await this.service.updateMembershipPlan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MembershipPlan)
  async deleteMembershipPlan(
    @graphql.Args() args: DeleteMembershipPlanArgs
  ): Promise<MembershipPlan | null> {
    try {
      return await this.service.deleteMembershipPlan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
