/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MembershipPlanService } from "../membershipPlan.service";
import { MembershipPlanCreateInput } from "./MembershipPlanCreateInput";
import { MembershipPlan } from "./MembershipPlan";
import { MembershipPlanFindManyArgs } from "./MembershipPlanFindManyArgs";
import { MembershipPlanWhereUniqueInput } from "./MembershipPlanWhereUniqueInput";
import { MembershipPlanUpdateInput } from "./MembershipPlanUpdateInput";

export class MembershipPlanControllerBase {
  constructor(protected readonly service: MembershipPlanService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MembershipPlan })
  async createMembershipPlan(
    @common.Body() data: MembershipPlanCreateInput
  ): Promise<MembershipPlan> {
    return await this.service.createMembershipPlan({
      data: data,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MembershipPlan] })
  @ApiNestedQuery(MembershipPlanFindManyArgs)
  async membershipPlans(
    @common.Req() request: Request
  ): Promise<MembershipPlan[]> {
    const args = plainToClass(MembershipPlanFindManyArgs, request.query);
    return this.service.membershipPlans({
      ...args,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MembershipPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async membershipPlan(
    @common.Param() params: MembershipPlanWhereUniqueInput
  ): Promise<MembershipPlan | null> {
    const result = await this.service.membershipPlan({
      where: params,
      select: {
        createdAt: true,
        description: true,
        duration: true,
        id: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MembershipPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMembershipPlan(
    @common.Param() params: MembershipPlanWhereUniqueInput,
    @common.Body() data: MembershipPlanUpdateInput
  ): Promise<MembershipPlan | null> {
    try {
      return await this.service.updateMembershipPlan({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          duration: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MembershipPlan })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMembershipPlan(
    @common.Param() params: MembershipPlanWhereUniqueInput
  ): Promise<MembershipPlan | null> {
    try {
      return await this.service.deleteMembershipPlan({
        where: params,
        select: {
          createdAt: true,
          description: true,
          duration: true,
          id: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
